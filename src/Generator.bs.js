// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ast = require("./Ast.bs.js");
var Token = require("./Token.bs.js");
var Words = require("./Words.bs.js");

function generate_factor(ast, reg) {
  switch (ast.TAG | 0) {
    case /* UnOp */0 :
        var factor = ast._1;
        var ope = ast._0;
        if (Token.identificador(ope) === "LogNeg") {
          var return_unop = "    cmpl   $0, " + (Words.registro(reg) + ("\n    movl   $0, " + (Words.registro(1) + "\n    sete   %al ")));
          generate_factor(factor, 0);
          console.log(return_unop);
          return ;
        }
        var return_unop$1 = "    " + (Words.tradu(Token.identificador(ope)) + ("    " + Words.registro(1)));
        generate_factor(factor, 0);
        console.log(return_unop$1);
        return ;
    case /* Err_fac */1 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Generator.re",
                2,
                2
              ],
              Error: new Error()
            };
    case /* Const */2 :
        var decimal = String(ast._0);
        var return_statement = "    movl    " + (decimal + (", " + Words.registro(reg)));
        console.log(return_statement);
        return ;
    
  }
}

function generate_termino(ast) {
  switch (ast.TAG | 0) {
    case /* Ter */0 :
        return generate_factor(ast._0, 0);
    case /* Err_ter */1 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Generator.re",
                20,
                2
              ],
              Error: new Error()
            };
    case /* BinOp */2 :
        generate_factor(ast._1, 0);
        generate_factor(ast._2, 1);
        var return_termino = "    " + (Words.tradu(Token.identificador(ast._0)) + ("    " + Words.registro(1)));
        console.log(return_termino);
        return ;
    
  }
}

function generate_exp(ast_exp) {
  switch (ast_exp.TAG | 0) {
    case /* Expr */0 :
        return generate_termino(ast_exp._0);
    case /* Err_exp */1 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Generator.re",
                31,
                2
              ],
              Error: new Error()
            };
    case /* BinOp */2 :
        var ope = ast_exp._0;
        generate_termino(ast_exp._1);
        generate_termino(ast_exp._2);
        if (Token.identificador(ope) === "Negation") {
          var return_unop = "    " + (Words.tradu(Token.identificador(ope)) + ("    " + Words.registro(1)));
          console.log(return_unop);
        }
        var return_exp = "    add    " + (Words.registro(0) + (", " + Words.registro(1)));
        console.log(return_exp);
        return ;
    
  }
}

function visit_statement(name) {
  var return_statement = "    " + Words.tradu(name);
  console.log(return_statement);
  
}

function generate_statement(ast) {
  if (Ast.identi_statement(ast) !== true) {
    return ;
  }
  var name_state = Ast.ext_name_statement(ast);
  var node_exp = Ast.ext_statement(ast);
  generate_exp(node_exp);
  return visit_statement(name_state);
}

function gen_function_code(ast) {
  if (Ast.identi_fun_decl(ast) !== true) {
    return ;
  }
  var functionName = Ast.ext_name_fun_decl(ast);
  var node_statement = Ast.ext_fun_decl(ast);
  console.log("_" + (functionName + ":"));
  return generate_statement(node_statement);
}

function generate_code(ast) {
  if (Ast.identi_prog(ast) === true) {
    var node_prog = Ast.ext_prog(ast);
    console.log("    .globl _main");
    return gen_function_code(node_prog);
  }
  console.log(Ast.ext_prog_err(ast));
  
}

exports.generate_factor = generate_factor;
exports.generate_termino = generate_termino;
exports.generate_exp = generate_exp;
exports.visit_statement = visit_statement;
exports.generate_statement = generate_statement;
exports.gen_function_code = gen_function_code;
exports.generate_code = generate_code;
/* No side effect */
