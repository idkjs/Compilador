// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");

function tokenToString(acummulator, t) {
  var result;
  if (typeof t === "number") {
    switch (t) {
      case /* OpenBrace */0 :
          result = "OpenBrace";
          break;
      case /* CloseBrace */1 :
          result = "CloseBrace";
          break;
      case /* OpenParen */2 :
          result = "OpenParen";
          break;
      case /* CloseParen */3 :
          result = "CloseParen";
          break;
      case /* Semicolon */4 :
          result = "Semicolon";
          break;
      case /* ReturnKeyword */5 :
          result = "ReturnKeyword";
          break;
      case /* IntKeyword */6 :
          result = "IntKeyword";
          break;
      case /* Negation */7 :
          result = "Negation";
          break;
      case /* Bitwise */8 :
          result = "Bitwise";
          break;
      case /* LogNeg */9 :
          result = "LogNeg";
          break;
      case /* Addition */10 :
          result = "Addition";
          break;
      case /* Multiplication */11 :
          result = "Multiplication";
          break;
      case /* Division */12 :
          result = "Division";
          break;
      case /* Invalid */13 :
          result = "Invalid Token";
          break;
      
    }
  } else {
    result = t.TAG === /* Id */0 ? "(Id: " + (t._0 + ")") : "(Constant: " + (String(t._0) + ")");
  }
  return acummulator + (" " + (result + ","));
}

function tokenListToString(tokensList) {
  var comma_regexp = /,$/;
  var stringList = Belt_List.reduce(tokensList, "[", tokenToString);
  return stringList.replace(comma_regexp, " ]");
}

function printTokenList(tokenList) {
  console.log(tokenListToString(tokenList));
  return tokenList;
}

function identificador(t) {
  if (typeof t !== "number") {
    if (t.TAG === /* Id */0) {
      return "Id";
    } else {
      return "Constant";
    }
  }
  switch (t) {
    case /* OpenBrace */0 :
        return "OpenBrace";
    case /* CloseBrace */1 :
        return "CloseBrace";
    case /* OpenParen */2 :
        return "OpenParen";
    case /* CloseParen */3 :
        return "CloseParen";
    case /* Semicolon */4 :
        return "Semicolon";
    case /* ReturnKeyword */5 :
        return "ReturnKeyword";
    case /* IntKeyword */6 :
        return "IntKeyword";
    case /* Negation */7 :
        return "Negation";
    case /* Bitwise */8 :
        return "Bitwise";
    case /* LogNeg */9 :
        return "LogNeg";
    case /* Addition */10 :
        return "Addition";
    case /* Multiplication */11 :
        return "Multiplication";
    case /* Division */12 :
        return "Division";
    case /* Invalid */13 :
        return "Invalid Token";
    
  }
}

function extrac(t) {
  if (typeof t !== "number") {
    if (t.TAG === /* Id */0) {
      return t._0;
    } else {
      return String(t._0);
    }
  }
  if (t === /* Invalid */13) {
    return "Invalid Token";
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Token.re",
          78,
          4
        ],
        Error: new Error()
      };
}

exports.tokenToString = tokenToString;
exports.tokenListToString = tokenListToString;
exports.printTokenList = printTokenList;
exports.identificador = identificador;
exports.extrac = extrac;
/* No side effect */
