// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function identi_prog(t) {
  if (t.TAG === /* Prog */0) {
    return true;
  } else {
    return false;
  }
}

function identi_fun_decl(t) {
  if (t.TAG === /* Err_fun */0) {
    return false;
  } else {
    return true;
  }
}

function identi_statement(t) {
  switch (t.TAG | 0) {
    case /* Assign */0 :
    case /* Return */1 :
        return true;
    case /* Err_state */2 :
        return false;
    
  }
}

function identi_exp(t) {
  switch (t.TAG | 0) {
    case /* Err_exp */1 :
        return false;
    case /* Expr */0 :
    case /* BinOp */2 :
        return true;
    
  }
}

function identi_termino(t) {
  switch (t.TAG | 0) {
    case /* Err_ter */1 :
        return false;
    case /* Ter */0 :
    case /* BinOp */2 :
        return true;
    
  }
}

function identi_factor(t) {
  switch (t.TAG | 0) {
    case /* Err_fac */1 :
        return false;
    case /* UnOp */0 :
    case /* Const */2 :
        return true;
    
  }
}

function ext_prog(t) {
  if (t.TAG === /* Prog */0) {
    return t._0;
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Ast.re",
          70,
          27
        ],
        Error: new Error()
      };
}

function ext_name_fun_decl(t) {
  if (t.TAG !== /* Err_fun */0) {
    return t._0;
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Ast.re",
          76,
          40
        ],
        Error: new Error()
      };
}

function ext_fun_decl(t) {
  if (t.TAG !== /* Err_fun */0) {
    return t._1;
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Ast.re",
          82,
          35
        ],
        Error: new Error()
      };
}

function ext_name_statement(t) {
  switch (t.TAG | 0) {
    case /* Assign */0 :
        return t._0;
    case /* Return */1 :
        return "ReturnKeyword";
    case /* Err_state */2 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Ast.re",
                88,
                42
              ],
              Error: new Error()
            };
    
  }
}

function ext_statement(t) {
  switch (t.TAG | 0) {
    case /* Assign */0 :
        return t._1;
    case /* Return */1 :
        return t._0;
    case /* Err_state */2 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Ast.re",
                95,
                37
              ],
              Error: new Error()
            };
    
  }
}

function ext_prog_err(t) {
  if (t.TAG !== /* Prog */0) {
    return t._0;
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Ast.re",
          102,
          31
        ],
        Error: new Error()
      };
}

function ext_fun_err(t) {
  if (t.TAG === /* Err_fun */0) {
    return t._0;
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "Ast.re",
          108,
          34
        ],
        Error: new Error()
      };
}

function ext_state_err(t) {
  switch (t.TAG | 0) {
    case /* Assign */0 :
    case /* Return */1 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Ast.re",
                114,
                37
              ],
              Error: new Error()
            };
    case /* Err_state */2 :
        return t._0;
    
  }
}

function ext_exp_err(t) {
  switch (t.TAG | 0) {
    case /* Err_exp */1 :
        return t._0;
    case /* Expr */0 :
    case /* BinOp */2 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Ast.re",
                120,
                29
              ],
              Error: new Error()
            };
    
  }
}

function ext_ter_err(t) {
  switch (t.TAG | 0) {
    case /* Err_ter */1 :
        return t._0;
    case /* Ter */0 :
    case /* BinOp */2 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Ast.re",
                125,
                32
              ],
              Error: new Error()
            };
    
  }
}

function ext_fac_err(t) {
  switch (t.TAG | 0) {
    case /* Err_fac */1 :
        return t._0;
    case /* UnOp */0 :
    case /* Const */2 :
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Ast.re",
                130,
                31
              ],
              Error: new Error()
            };
    
  }
}

function printAST(ast) {
  console.log("AST del parser aqui");
  console.log(ast);
  return ast;
}

exports.identi_prog = identi_prog;
exports.identi_fun_decl = identi_fun_decl;
exports.identi_statement = identi_statement;
exports.identi_exp = identi_exp;
exports.identi_termino = identi_termino;
exports.identi_factor = identi_factor;
exports.ext_prog = ext_prog;
exports.ext_name_fun_decl = ext_name_fun_decl;
exports.ext_fun_decl = ext_fun_decl;
exports.ext_name_statement = ext_name_statement;
exports.ext_statement = ext_statement;
exports.ext_prog_err = ext_prog_err;
exports.ext_fun_err = ext_fun_err;
exports.ext_state_err = ext_state_err;
exports.ext_exp_err = ext_exp_err;
exports.ext_ter_err = ext_ter_err;
exports.ext_fac_err = ext_fac_err;
exports.printAST = printAST;
/* No side effect */
